import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  public void KeepOnlyBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setGreen(0);
        pixelObj.setRed(0);
      }
    }
  }
  public void KeepOnlyRed()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setGreen(0);
        pixelObj.setBlue(0);
      }
    }
  }
  public void KeepOnlyGreen()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
        pixelObj.setRed(0);
      }
    }
  }
  
  public void negate()
  {
	    Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setBlue(255-pixelObj.getBlue());
	        pixelObj.setRed(255-pixelObj.getRed());
	        pixelObj.setGreen(255-pixelObj.getGreen());

	      }
	    }
	  }
  
  public void GrayScale()
  {
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	    	  int i = ((pixelObj.getBlue() + pixelObj.getRed() + pixelObj.getGreen())/3);
	        pixelObj.setBlue(i);
	        pixelObj.setRed(i);
	        pixelObj.setGreen(i);

	      }
	    }
	  }
  public void FixUnderwater()
  {
	  Pixel pixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  for ( int row = 0; row < pixels.length; row++ )
      {
          for ( int col = 0; col < pixels[0].length; col++ )
          {
              pixel = pixels[row][col];
              pixel.setRed( pixel.getRed() * 3 );
          }
      }
	  }  
  
  public void mirrorVertical()
  {
      Pixel[][] pixels = this.getPixels2D();
      Pixel leftPixel = null;
      Pixel rightPixel = null;
      int width = pixels[0].length;
      for ( int row = 0; row < pixels.length; row++ )
      {
          for ( int col = 0; col < width / 2; col++ )
          {
              leftPixel = pixels[row][col];
              rightPixel = pixels[row][width - 1 - col];
              rightPixel.setColor( leftPixel.getColor() );
          }
      }
  }


  /**
   * Method that mirrors the picture around a vertical mirror in the center of
   * the picture from right to left
   */
  public void mirrorVerticalRightToLeft()
  {
      Pixel[][] pixels = this.getPixels2D();
      Pixel leftPixel = null;
      Pixel rightPixel = null;
      int width = pixels[0].length;
      for ( int row = 0; row < pixels.length; row++ )
      {
          for ( int col = 0; col < width / 2; col++ )
          {
              leftPixel = pixels[row][col];
              rightPixel = pixels[row][width - 1 - col];
              leftPixel.setColor( rightPixel.getColor() );
          }
      }
  }


  /**
   * Method that mirrors the picture around a horizontal mirror in the center
   * of the picture from top to bottom
   */
  public void mirrorHorizontal()
  {
      Pixel[][] pixels = this.getPixels2D();
      Pixel topPixel = null;
      Pixel botPixel = null;
      int height = pixels.length;
      for ( int row = 0; row < height / 2; row++ )
      {
          for ( int col = 0; col < pixels[0].length; col++ )
          {
              topPixel = pixels[row][col];
              botPixel = pixels[height - 1 - row][col];
              botPixel.setColor( topPixel.getColor() );
          }
      }
  }


  /**
   * Method that mirrors the picture around a horizontal mirror in the center
   * of the picture from bottom to top
   */
  public void mirrorHorizontalBotToTop()
  {
      Pixel[][] pixels = this.getPixels2D();
      Pixel topPixel = null;
      Pixel botPixel = null;
      int height = pixels.length;
      for ( int row = 0; row < height / 2; row++ )
      {
          for ( int col = 0; col < pixels[0].length; col++ )
          {
              topPixel = pixels[row][col];
              botPixel = pixels[height - 1 - row][col];
              topPixel.setColor( botPixel.getColor() );
          }
      }
  }


  /**
   * Mirror around a mirror positioned on the diagonal line from bottom left
   * to top right
   */
  public void mirrorDiagonal()
  {
      Pixel[][] pixels = this.getPixels2D();
      Pixel topPixel = null;
      Pixel botPixel = null;
      int height = pixels.length;

      for ( int row = 0; row < height; row++ )
      {
          for ( int col = 0; col < row; col++ )
          {
              botPixel = pixels[row][col];
              topPixel = pixels[col][row];
              topPixel.setColor( botPixel.getColor() );
          }
      }
  }


  /**
   * Mirror just part of a picture of a temple
   */
  public void mirrorTemple()
  {
      int mirrorPoint = 276;
      Pixel leftPixel = null;
      Pixel rightPixel = null;
      int count = 0;
      Pixel[][] pixels = this.getPixels2D();

      // loop through the rows
      for ( int row = 27; row < 97; row++ )
      {
          // loop from 13 to just before the mirror point
          for ( int col = 13; col < mirrorPoint; col++ )
          {

              leftPixel = pixels[row][col];
              rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
              rightPixel.setColor( leftPixel.getColor() );
          }
      }
  }


  /** Mirror just part of a picture of a snowman */
  public void mirrorArms()
  {
      Pixel topPixel = null;
      Pixel botPixel = null;
      Pixel[][] pixels = this.getPixels2D();

      // loop through the rows
      for ( int row = 155; row < 191; row++ )
      {
          // loop through the columns
          for ( int col = 98; col < 169; col++ )
          {
              topPixel = pixels[row][col];
              botPixel = pixels[191 - row + 191][col];
              botPixel.setColor( topPixel.getColor() );
          }
      }

      // loop through the rows
      for ( int row = 155; row < 191; row++ )
      {
          // loop through the columns
          for ( int col = 238; col < 296; col++ )
          {
              topPixel = pixels[row][col];
              botPixel = pixels[191 - row + 191][col];
              botPixel.setColor( topPixel.getColor() );
          }
      }
  }


  /** Mirror just the gull */
  public void mirrorGull()
  {
      int mirrorPoint = 350;
      Pixel leftPixel = null;
      Pixel rightPixel = null;
      Pixel[][] pixels = this.getPixels2D();

      // loop through the rows
      for ( int row = 225; row < 332; row++ )
      {
          // loop from 13 to just before the mirror point
          for ( int col = 219; col < mirrorPoint; col++ )
          {
              leftPixel = pixels[row][col];
              rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
              rightPixel.setColor( leftPixel.getColor() );
          }
      }
  }


  /**
   * copy from the passed fromPic to the specified startRow and startCol in
   * the current picture
   * 
   * @param fromPic
   *            the picture to copy from
   * @param startRow
   *            the start row to copy to
   * @param startCol
   *            the start col to copy to
   */
  public void copy( Picture fromPic, int startRow, int startCol )
  {
      Pixel fromPixel = null;
      Pixel toPixel = null;
      Pixel[][] toPixels = this.getPixels2D();
      Pixel[][] fromPixels = fromPic.getPixels2D();
      for ( int fromRow = 0, toRow = startRow; fromRow < fromPixels.length
          && toRow < toPixels.length; fromRow++, toRow++ )
      {
          for ( int fromCol = 0, toCol = startCol; fromCol < fromPixels[0].length
              && toCol < toPixels[0].length; fromCol++, toCol++ )
          {
              fromPixel = fromPixels[fromRow][fromCol];
              toPixel = toPixels[toRow][toCol];
              toPixel.setColor( fromPixel.getColor() );
          }
      }
  }


  /**
   * Method to create a collage of several pictures
   */
  public void createCollage()
  {
      Picture flower1 = new Picture( "flower1.jpg" );
      Picture flower2 = new Picture( "flower2.jpg" );
      this.copy( flower1, 0, 0 );
      this.copy( flower2, 100, 0 );
      this.copy( flower1, 200, 0 );
      Picture flowerNoBlue = new Picture( flower2 );
      flowerNoBlue.zeroBlue();
      this.copy( flowerNoBlue, 300, 0 );
      this.copy( flower1, 400, 0 );
      this.copy( flower2, 500, 0 );
      this.mirrorVertical();
      this.write( "collage.jpg" );
  }


  /**
   * copy from the passed fromPic to the specified startRow and startCol in
   * the current picture
   * 
   * @param fromPic
   *            the picture to copy from
   * @param fromStartRow
   *            the row to start coping from in the from picture
   * @param fromStartCol
   *            the column to start copying from in the from picture
   * @param fromEndRow
   *            the row to stop before in the from picture
   * @param fromEndCol
   *            the column to stop before in the from picture
   * @param toStartRow
   *            the row to start copying to
   * @param toStartCol
   *            the column to start copying to
   */
  public void copy(
      Picture fromPic,
      int fromStartRow,
      int fromStartCol,
      int fromEndRow,
      int fromEndCol,
      int toStartRow,
      int toStartCol )
  {
      Pixel fromPixel = null;
      Pixel toPixel = null;
      Pixel[][] toPixels = this.getPixels2D();
      Pixel[][] fromPixels = fromPic.getPixels2D();
      for ( int fromRow = fromStartRow, toRow = toStartRow; fromRow <= fromEndRow
          && toRow < toPixels.length; fromRow++, toRow++ )
      {
          for ( int fromCol = fromStartCol, toCol = toStartCol; fromCol <= fromEndCol
              && toCol < toPixels[0].length; fromCol++, toCol++ )
          {
              fromPixel = fromPixels[fromRow][fromCol];
              toPixel = toPixels[toRow][toCol];
              toPixel.setColor( fromPixel.getColor() );
          }
      }
  }


  /**
   * Method to show large changes in color
   * 
   * @param edgeDist
   *            the distance for finding edges
   */
  public void edgeDetection( int edgeDist )
  {
      Pixel leftPixel = null;
      Pixel rightPixel = null;
      Pixel[][] pixels = this.getPixels2D();
      Color rightColor = null;
      for ( int row = 0; row < pixels.length; row++ )
      {
          for ( int col = 0; col < pixels[0].length - 1; col++ )
          {
              leftPixel = pixels[row][col];
              rightPixel = pixels[row][col + 1];
              rightColor = rightPixel.getColor();
              if ( leftPixel.colorDistance( rightColor ) > edgeDist )
              {
                  leftPixel.setColor( Color.BLACK );
              }
              else
              {
                  leftPixel.setColor( Color.WHITE );
              }
          }
      }
  }
  
  public void encode (Picture messagePic) {
	    Pixel[][] pixes = getPixels2D();
	    Pixel[][] messagePix = messagePic.getPixels2D();
	    for (int x = 0; x < pixes.length; x++){
	      for (int y = 0; y < pixes[x].length; y++){
	        Pixel pix = pixes[x][y];
	        if (pix.getBlue() < pix.getAverage() && pix.getBlue() % 2 != 0){
	          pix.setBlue(pix.getBlue() - 1);
	        }
	        
	        if (messagePix[x][y].getBlue() < 220){
	          pix.setBlue(pix.getBlue() + 1);
	        }
	      }
	    }
	  }
	  
	  public void decode () {
	    Pixel[][] pixes = getPixels2D();
	    for (int x = 0; x < pixes.length; x++){
	      for (int y = 0; y < pixes[x].length; y++){
	        Pixel pix = pixes[x][y];
	        if (pix.getBlue() % 2 != 0){
	          pix.setColor(Color.BLACK);
	        }else{
	          pix.setColor(Color.WHITE);
	        }
	      }
	    }
	  }
  
  
  	public void sharpen(int x, int y, int w, int h)
  	{
  		System.out.println("Name - Samuel Liu");
  		System.out.println("Period 2");
  		System.out.println("Computer Number 6");
  		System.out.println("Date = 4/24/18");
  		Pixel currPixel = null;
        Pixel diagPixel = null;
        Pixel[][] pixels = this.getPixels2D();
        Color rightColor = null;
        for ( int row = y; row < y+h; row++ )
        {
            for ( int col = x; col < x+w; col++ )
            {
            	currPixel = pixels[row][col];
            	diagPixel = pixels[row-1][col-1];
            	int blue = currPixel.getBlue() + (((currPixel.getBlue()-diagPixel.getBlue()))/2);
            	if(blue > 255)
            	{
            		currPixel.setBlue(255);
            	}
            	else if(blue < 0)
            	{
            		currPixel.setBlue(0);
            	}
            	else
            	{
            	currPixel.setBlue(blue);
            	}
            	int red = currPixel.getRed() + (((currPixel.getRed()-diagPixel.getRed()))/2);
            	if(red > 255)
            	{
            		currPixel.setRed(255);
            	}
            	else if(red < 0)
            	{
            		currPixel.setRed(0);
            	}
            	else
            	{
            	currPixel.setRed(red);
            	}
            	int green = currPixel.getGreen() + (((currPixel.getGreen()-diagPixel.getGreen()))/2);
            	if(green > 255)
            	{
            		currPixel.setGreen(255);
            	}
            	else if(green < 0)
            	{
            		currPixel.setGreen(0);
            	}
            	else
            	{
            	currPixel.setGreen(green);
            	}
             }
        }	
  		
  	}



  /*
   * Main method for testing - each class in Java can have a main method
   */
  public static void main( String[] args )
  {
      Picture beach = new Picture( "beach.jpg" );
      beach.explore();
      beach.zeroBlue();
      beach.explore();
  }

} // this } is the end of class Picture, put all new methods before this